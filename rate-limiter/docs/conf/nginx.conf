# worker进程运行用户
user  root;
# worker进程, cpu核心数-1
worker_processes  2;

# 日志级别：debug info notice warn error crit
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    # 默认也使用epoll，可不配置
    use epoll;
    # 每个worker最大客户端连接数
    worker_connections  10240;
}


http {
    # 导入文件
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    # 文件高效传输
    #sendfile        on;
    # sendfile开启后才有效，数据包达到一定量后才发送以提高效率
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #一个http请求之后客户端与服务器保持连接不断开以供下次请求的连接保持时间
    #keepalive_timeout  65;

    #传输内容是否压缩，提高传输效率，节约带宽
    #gzip  on;
    #限制最小压缩大小，小于1字节文件不会压缩
    #gzip_min_length 1;
    # 压缩级别（1~9），级别越高压缩率越大CPU使用越大
    #gzip_comp_level 3;
    # 需要压缩的文件类型
    #gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json;

    #include myNginx.conf;

    #upstream tomcats {
    #    server 192.168.3.16:8088;
# 负载均衡-轮询,权重。weight(权重)默认为1
# max_conns:最大连接数
# slow_start:将配置的weight从0在配置的时间内提升至指定的weight。(不可用于hash，random的负载均衡方式；对于单台服务器，此参数会被忽略，商业版nginx可用)
# down:标识服务器状态为不可用状态
# backup:备用机，当其他服务器不可用时备用机才会被使用
# max_fails,fail_timeout:需要配合使用，最大失败次数，失败达到最大次数后，等待此重试超时时间后重新尝试请求。
#        server 192.168.3.17:8080 weitht=1 max_conns=2 slow_start=60s down;
#        server 192.168.3.18:8080 weight=2;
#        keepalive:保持为长连接的数量，可提高吞吐量
#        keepalive 32;
    #}

# 定义我的缓存
# proxy_cache_path 设置缓存保存的目录
# keys_zone 设置共享内存(缓存)名以及初始化占用空间大小
# max_size 设置缓存最大占用空间
# inactive 缓存失效时间，此时间过后缓存目录(proxy_cache_path)中的缓存文件将被删除
# use_temp_path 关闭临时目录
    #proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;

    #server {
    #    listen       80;
    #    server_name  www.tomcats.com;

        # 开启并使用缓存
    #    proxy_cache mycache;
        # 针对200和203状态码的缓存设置过期时间
    #    proxy_cache_valid 200 203 8h;

    #    location / {
    #        proxy_pass http://tomcats;
#            proxy_http_version 1.1;
#            proxy_set_header Connection "";
     #   }
        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       80;
        server_name  www.lvs.com;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }

    # 根据IP地址限制访问速率
    # 1) 参数1 $binary_remote_addr nginx系统变量，其中binary_表示缩写内存占用，remote_addr代表通过IP地址来限流
    # 2) 参数2 zone=iplimit:20m 定义了一块名为iplimit的20m大小的内存区域，用于记录访问频率信息
    # 3) 参数3 rate=1r/s 标识访问限制频率，1 request / secends
    limit_req_zone $binary_remote_addr zone=iplimit:20m rate=10r/s;

    # 根据服务器级别做限流
    limit_req_zone $server_name zone=serverlimit:20m rate=1r/s;

    # 基于连接数的限流, Tips: 浏览器访同一个URL时是串行访问
    limit_conn_zone $binary_remote_addr zone=ipconn:20m;
    limit_conn_zone $server_name zone=serverconn:20m;

    server {
        # 此处没有写listen，默认为80，通过server_name来路由
        server_name  www.training.com;
        
        location /access-limit/ {
            proxy_pass http://192.168.3.13:10086/;

            # 基于IP地址的限制
            # zone=iplimit 引用limit_req_zone中的zone变量的限制规则
            # burst=2 设置一个大小为2个请求的缓冲区域，请求数量超过限流频率时，将其放入缓冲区
            # nodelay 缓冲区满后，拒绝请求，返回503异常
            limit_req zone=iplimit burst=2 nodelay;
            
            # 根据服务器级别做限流，多个限流规则以哪个先到达条件
            limit_req zone=serverlimit burst=2 nodelay;

            # 每个server_name最多保持100个连接
            limit_conn serverconn 100;

            # 每个IP最多保持1个连接
            limit_conn ipconn 1;

            # 指定请求频率限制返回的错误码
            limit_req_status 504;
            # 指定连接数量限制返回的错误码
            limit_conn_status 503;
        }
    }


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    
    include frontend.conf;
    include tomcats.conf;
    #include frontend.conf;
}
